Run() {
	KernelName() { uname -s; }
	KernelLikeId() { cat /etc/os-release | grep '^ID_LIKE=' | cut -d '=' -f 2 | xargs echo; }
	KernelId() { cat /etc/os-release | grep '^ID=' | cut -d '=' -f 2 | xargs echo; }

	Upper1st() { echo "${1^}"; } # 1文字目を大文字にする。他はそのまま
	Upper() { echo "${1^^}"; } # すべて大文字にする
	Lower() { echo "${1,,}"; } # すべて小文字にする

	__KernelGenealogyList() { echo -e "$(KernelName)\n$(KernelLikeId)\n$(KernelId)"; }
	_KernelGenealogyList() { echo -e "$($1 $(KernelName))\n$($1 $(KernelLikeId))\n$($1 $(KernelId))"; }
	# options:
	#   -r  : is_reverse=1.
	#   -c N: 未実装。case. N=0,1,2,3(raw,lower,upper,1文字目だけ大文字。デフォルト0)
	KernelGenealogyList() {
		local is_reverse=0
		local case_id=0
		while getopts rc:h OPT; do
                        echo "OPT=$OPT"
			case $OPT in
			r) is_reverse=1;;
			c) case_id="$OPTARG";;
			h) { echo -e "options:\n  -r  : is_reverse=1.\n  -c N: case. N=0,1,2,3(raw,lower,upper,only upper 1st letter. default 0(raw).)"; return; };;
			esac
		done
		echo "is_reverse=$is_reverse"
		echo "case_id=$case_id"
		local list=
		case $case_id in
		1) list="$(_KernelGenealogyList Lower)";;
		2) list="$(_KernelGenealogyList Upper)";;
		3) list="$(_KernelGenealogyList Upper1st)";;
		*) list="$(__KernelGenealogyList)";;
		esac
#		local list="$(_KernelGenealogyList)"
#		local list="$(KernelName)\n$(KernelLikeId)\n$(KernelId)"
		[ 1 -eq $is_reverse ] && echo -e "$list" | tac || echo -e "$list"
#		local list="$(echo -e "$(KernelName)\n$(KernelLikeId)\n$(KernelId)")"
        }
#	KernelGenealogyGraph() { local res=; for node in "$(KernelGenealogyList)"; do res+="$node/"; done; echo $res | head -c -2; }
#	KernelGenealogyGraph() { local res=; IFS=$'\n'; for node in $(echo -e "$(KernelGenealogyList)"); do res+="$node/"; done; echo $res | head -c -2; }

	KernelGenealogy() {
		local is_reverse=0
		local separator=/
		while getopts rs:h OPT; do
			case $OPT in
			r) is_reverse=1;;
			s) separator="$OPTARG";;
			h) Help;;
			esac
		done
		GenerateGraph $is_reverse "$separator"
	}
	# $1: is_reverse, $2: separator
	GenerateGraph() {
		local list="$(echo -e "$(KernelGenealogyList)")"
		[ 1 -eq $is_reverse ] && list="$(echo -e "$list" | tac)" || list="$(echo -e "$list")";
		IFS=$'\n'
		for line in $(echo -e "$list"); do
			res+="$line$separator"
		done
		echo "$res" | head -c -$((${#separator} + 1));
	}
	Help() {
		local msg=$(cat <<- EOS
		options:
		  -r      is_reverse.
		  -s '/'  separator.
		EOS
		)
		echo "$msg"
	}
	# stdin: 結合したい文字列（delimiter: \n）
	# $1: separator
	Join() {
		local res=                
		local separator=${1:-/}
		IFS=$'\n'
		for line in $(cat -); do
			res+="$line$separator"
		done
		echo "$res" | head -c -$((${#separator} + 1));
	}
}
Run
echo ========= Names ==========
echo $(KernelName)
echo $(KernelLikeId)
echo $(KernelId)
echo ========= KernelGenealogyList ==========
KernelGenealogyList -h
echo -e "$(KernelGenealogyList -r)"
echo
echo -e "$(KernelGenealogyList -c 3)"
echo
echo -e "$(KernelGenealogyList -r -c 3)"
echo
echo -e "$(KernelGenealogyList -r -c 3)" | Join $separator
echo 
echo ========= KernelGenealogy ==========
#KernelGenealogy
#echo
#KernelGenealogy -h
#echo
#KernelGenealogy -r
#echo
#KernelGenealogy -r -s ' / '
#echo
#KernelGenealogy -r -s ' / '
#echo

